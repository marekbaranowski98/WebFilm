openapi: 3.0.0
info:
  description: |
    This is a documentation api Webfilm server.
  version: "1.0.0"
  title: WebFilm API
  contact:
    email: marek.baranowski@student.po.edu.pl
  license:
    name: MIT
    url: 'https://github.com/marekbaranowski98/WebFilm/blob/main/LICENSE'
servers:
  - description: API WebFilm Server
    url: http://127.0.0.1:8000/api
    variables:
      port:
        enum:
          - '8000'
        default: '8000'
paths:
  /users/:
    post:
      tags:
        - user
      summary: Register user
      operationId: registerUser
      requestBody:
        description: User data required for registration
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik został pomyślne zarejestrowany.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik jest zalogowany.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
  /users/me/validator-unique/:
    post:
      tags:
        - user
      summary: Validator of the uniqueness of user data
      operationId: validatorUserData
      requestBody:
        description: The user data to validation.
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                key:
                  type: string
                  example: email
                value:
                  type: string
                  example: john@example.com
              required:
                - key
                - value
      responses:
        204:
          description: Not content
          content: {}
        422:
          description: Unprocessable entity
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /users/login/:
    post:
      tags:
        - user
      summary: Login user
      operationId: loginUser
      requestBody:
        description: User data required for logged
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: Get token
          content: 
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik jest zalogowany.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /users/me/:
    get:
      tags:
        - user
      summary: Check is user logged
      operationId: authUser
      security:
        - bearerAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedUser'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Edit data logged user
      operationId: editUser
      requestBody:
        description: User data required for registration
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserEdit'
      security:
        - bearerAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedUser'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Coś poszło nie tak.
  /users/me/logout/:
    get:
      tags:
        - user
      summary: Logout user
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        204:
          description: Not content
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /users/act/{key}/:
    get:
      tags:
        - user
      summary: Active new user
      operationId: activeUser
      parameters:
      - name: key
        in: path
        description: Code to activate user
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Not content
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik jest zalogowany.
        404:
          description: Not Found
          content: {}
  /users/me/reset-password/:
    post:
      tags:
        - user
      summary: Send email reset password
      operationId: requestResetPassword
      requestBody:
        description: Email of the user for whom the password is to be reset
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.local
                  minLength: 8
                  maxLength: 254
                recaptcha:
                  type: string
                  example: 123
              required:
                - email
                - recaptcha
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik jest zalogowany.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
  /users/me/reset-password/{key}/:
    patch:
      tags:
        - user
      summary: Change password of user
      operationId: resetPassword
      parameters:
      - name: key
        in: path
        description: Key to reset password
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: New password to update
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: nhy6&UJM
                  pattern: '^[A-Za-z0-9$%^&]{8,32}$'
                  minLength: 8
                  maxLength: 128
                repeat_password:
                  type: string
                  format: password
                  example: nhy6&UJM
                  pattern: '^[A-Za-z0-9$%^&]{8,32}$'
                  minLength: 8
                  maxLength: 128
                recaptcha:
                  type: string
                  example: 123
              required:
                - password
                - repeat_password
                - recaptcha
      responses:
        200:
          description: Not content
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik jest zalogowany.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  non_field_errors:
                    type: string
                    example: Podano błędny link.
        408:
          description: Request Timeout
          content:
            application/json:
              schema:
                type: object
                properties:
                  non_field_errors:
                    type: string
                    example: Link wygasł.
  /users/{login}/:
    get:
      tags:
        - user
      summary: Get user
      operationId: getUser
      parameters:
      - name: login
        in: path
        description: Login user
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not Found
          content: {}
        410:
          description: Gone
          content: {}
  /photos/{bucket}/{blob}/:
    get:
      tags:
        - photo
      summary: Get blob image from bucket
      description: Return image in format base64
      operationId: getPhoto
      parameters:
      - name: bucket
        in: path
        description: Name bucket
        required: true
        schema:
          type: string
      - name: blob
        in: path
        description: Name blob from bucket
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: byte
        404:
          description: Not Found
          content: {}
components:
  schemas:
    UserRegister:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
        login:
          type: string
          pattern: '^[\w.-]+$'
          minLength: 6
          maxLength: 30
          example: John1234
        password:
          type: string
          format: password
          example: nhy6&UJM
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 128
        repeat_password:
          type: string
          format: password
          example: nhy6&UJM
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 128
        email:
          type: string
          format: email
          example: john@example.local
          minLength: 8
          maxLength: 254
        name:
          type: string
          example: John
          maxLength: 150
        surname:
          type: string
          example: Smith
          maxLength: 150
        gender:
          type: integer
          example: 0
          description: Gender
          enum:
          - 0
          - 1
          - 2
        birth_date:
          type: string
          format: date
          example: '2000-01-01'
        avatar:
          type: string
          format: binary
        accept_statute:
          type: boolean
          example: false
        recaptcha:
          type: string
          example: 123
      required:
        - login
        - email
        - password
        - repeat_password
        - accept_statute
        - recaptcha
    UserEdit:
      type: object
      properties:
        login:
          type: string
          pattern: '^[\w.-]+$'
          minLength: 6
          maxLength: 30
          example: John1234
        password:
          type: string
          format: password
          example: nhy6&UJM
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 128
        repeat_password:
          type: string
          format: password
          example: nhy6&UJM
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 128
        email:
          type: string
          format: email
          example: john@example.local
          minLength: 8
          maxLength: 254
        name:
          type: string
          example: John
          maxLength: 150
        surname:
          type: string
          example: Smith
          maxLength: 150
        gender:
          type: integer
          example: 0
          description: Gender
          enum:
          - 0
          - 1
          - 2
        birth_date:
          type: string
          format: date
          example: '2000-01-01'
        avatar:
          type: string
          format: binary
        current_password:
          type: string
          format: password
          example: nhy6&UJM
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 128
    LoggedUser:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
        login:
          type: string
          example: John123
          pattern: '^[\w.-]+$'
          minLength: 6
          maxLength: 30
        email:
          type: string
          format: email
          example: john@example.local
          minLength: 8
          maxLength: 254
        name:
          type: string
          example: John
          maxLength: 150
        surname:
          type: string
          example: Smith
          maxLength: 150
        gender:
          type: integer
          example: 0
          description: Gender
          enum:
          - 0
          - 1
          - 2
        birth_date:
          type: string
          format: date
          example: '2000-01-01'
        avatarURL:
          type: string
          example: 00000000-0000-0000-0000-000000000000
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
        role:
          type: integer
          format: int32
          example: 0
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john@example.com
          minLength: 8
          maxLength: 254
        password:
          type: string
          format: password
          example: nhy6&UJM
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 128
        remember_me:
          type: boolean
          example: false
        recaptcha:
          type: string
          example: 123
      required:
        - email
        - password
        - recaptcha
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
        login:
          type: string
          example: John123
          pattern: '^[\w.-]+$'
          minLength: 6
          maxLength: 30
        name:
          type: string
          example: John
          maxLength: 150
        surname:
          type: string
          example: Smith
          maxLength: 150
        avatarURL:
          type: string
          example: 00000000-0000-0000-0000-000000000000
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
    Error:
      type: object
      properties:
        field:
          type: array
          items:
            type: string
      required:
        - field
        - message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT