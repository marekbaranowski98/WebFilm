openapi: 3.0.0
info:
  description: |
    This is a documentation api Webfilm server.
  version: "1.0.0"
  title: WebFilm API
  contact:
    email: marek.baranowski@student.po.edu.pl
  license:
    name: MIT
    url: 'https://github.com/marekbaranowski98/WebFilm/blob/main/LICENSE'
servers:
  - description: API WebFilm Server
    url: http://127.0.0.1:8000/api
    variables:
      port:
        enum:
          - '8000'
        default: '8000'
paths:
  /users/:
    post:
      tags:
        - user
      summary: Register user
      operationId: registerUser
      requestBody:
        description: User data required for registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: Użytkownik został pomyślne zarejestrowany.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
  /users/me/validator-unique/:
    post:
      tags:
        - user
      summary: Validator of the uniqueness of user data
      operationId: validatorUserData
      requestBody:
        description: The user data to validation.
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
              required:
                - key
                - value
      responses:
        204:
          description: Not content
          content: {}
        422:
          description: Unprocessable entity
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /users/login/:
    post:
      tags:
        - user
      summary: Login user
      operationId: loginUser
      requestBody:
        description: User data required for logged
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: Get token
          content: 
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /users/me/:
    get:
      tags:
        - user
      summary: Check is user logged
      operationId: authUser
      security:
        - bearerAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedUser'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
  /users/me/logout/:
    get:
      tags:
        - user
      summary: Logout user
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        204:
          description: Not content
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
components:
  schemas:
    UserRegister:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
        login:
          type: string
          pattern: '^[\w.-]+$'
          minLength: 6
          maxLength: 30
        password:
          type: string
          format: password
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 32
        repeat_password:
          type: string
          format: password
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 32
        email:
          type: string
          format: email
          minLength: 8
          maxLength: 254
        name:
          type: string
          maxLength: 150
        surname:
          type: string
          maxLength: 150
        gender:
          type: integer
          description: Gender
          enum:
          - 0
          - 1
          - 2
        birth_date:
          type: string
          format: date
        avatar:
          type: string
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
      required:
        - login
        - email
        - password
        - repeat_password
    LoggedUser:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
        login:
          type: string
          pattern: '^[\w.-]+$'
          minLength: 6
          maxLength: 30
        name:
          type: string
          maxLength: 150
        avatar:
          type: string
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 8
          maxLength: 254
        password:
          type: string
          format: password
          pattern: '^[A-Za-z0-9$%^&]{8,32}$'
          minLength: 8
          maxLength: 32
        remember_me:
          type: boolean
          example: false
      required:
        - email
        - password
    Error:
      type: object
      properties:
        field:
          type: array
          items:
            type: string
      required:
        - field
        - message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT